Intro: 
Linux est un système d'exploitation qui appartient à la famille UNIX, il est très répandu dans le milieu professionnel de l'informatique puisqu'il est gratuit, libre de droit et très personnalisable.
Si vous aimez taper des commandes dans un terminal, en voici quelques unes à essayer !

quelques commandes terminal:
cd : Navigue dans l'arborescence système
ex: cd/home/desktop/

mkdir : Créer un dossier.
ex : mkdir /home/desktop/monNouveauDossier

touch/gedit/nano : Edite un fichier texte.
touch /home/desktop/monDossier/monFichier

echo : Remplace le contenu d'un fichier texte
ex : echo /home/desktop/monDossier/monFichier "Hello World"

echo >> : Rajoute du contenu à un fichier texte
ex : echo >> /home/desktop/monDossier/monFichier "Ligne 2"

cat : Affiche le contenu d'un fichier texte
ex : cat /home/monDossier/monFichier


mv : Déplacer ou renommer des fichiers ou répertoires.
ex : mv /home/desktop/monDossier/monFichier /home/desktop/monNouveauDossier

cp : Copier Coller des fichiers ou répertoires.
ex : cp /home/desktop/monNouveauDossier/monFichier /home/desktop/monDossier

ls : Affiche les dossiers/fichiers dans le répertoire actuel
ex : ls /home/desktop/monNouveauDossier

ls -a : Affiche les dossier/fichiers cachés dans le répertoire actuel
ex : ls -a /srv

sudo : Octroie les permissions super-utilisateur pour une commande (à placer au début de la commande)
sudo su: Octroie les permissions super-utilisateur
ex : sudo mkdir srv/monSuperDossier

rm/rmdir: supprime un fichier/dossier
ex : rm /home/desktop/monNouveauDossier/monFichier

rm -dir -rf: supprime un dossier qui n'est pas vide (ATTENTION)
ex : rm -dir -rf /home/desktop/monNouveauDossier

man: ouvre le manuel d'utilisation du terminal
--help: Renvoie les informations sur une commande
ex : cd --help



Base de données:
Les bases de données mysql sont des "bibliothèques" qui permettent de stocker des informations (données) représentées graphiquement par un tableau avec des propriétés et des valeurs


Installer un emulateur de base de données en local, attention, lors de l'installation des différents paquets, il vous sera demandé d'entrer des mots de passes qui vous permetront par la suite d'accèder à vos bases de données.

Ouvrir un Terminal
-sudo apt-get install apache2 (Installe les packets Apache 2 nécéssaires à mysql)
-sudo apt-get install mysql-client (Installe les packets mysql client)
-sudo apt-get install mysql-server (Installe les packets mysql server)
-sudo apt-get install phpmyadmin (Installe les packets de phpmyadmin)

Une fois ces commandes exécutés, tous les packets nécéssaires sont maintenant installés et vous pouvez commencer à intéragir avec la BDD

Tout d'abbord connectez vous à mysql via la commande suivante :

mysql -u root -p

Il vous sera demandé un mot de passe, c'est celui qui vous avez saisi lors de l'installation des paquets précédents, tapez le sur votre clavier et appuyez sur Entrer. Vous êtes maintenant connectés à mysql et pouvez interagir avec vos bases de données, voici donc quelques commandes.

CREATE DATABASE dbName; Crée une Base de Données

DROP DATABASE dbName; Supprime une Base de Données

SHOW DATABASES; Lister les Bases de Données

USE dbName; Spécifie la Base de Données avec laquelle interagir

CREATE TABLE tableName (listes des entités); Crée une Table dans une Base de Données
create table maTable (
id tinyint(4) unsigned NOT NULL auto_increment,
nom varchar(80) NOT NULL,
prenom varchar(80) NOT NULL,
email varchar(32),
PRIMARY KEY (id)
);

DESCRIBE tableName; Affiche la structure d'une table

DROP TABLE tableName; Supprime une Table

ALTER TABLE tableName RENAME AS newTableName; Renomme une Table

TRUNCATE tableName; Vide une Table


Git est un outil de versionnage des fichiers permetant de travailler sur un projet à plusieurs, en gros il sert à garder en mémoire toutes les versions de vos fichiers sous un format compressé et vous pouvez lui demander à n'importe quel moment de vous renvoyer une version spécifique.

Installer Git :

sudo apt-get install git

Une fois installé, vous pouvez commencer à interragir avec lui.

git init {name}: Créer un dépot git dans le workspace (à spécifier)

git init --bare {name}: Créer un dépot git dans srv (à spécifier)

git status: 

git log:

git add

git commit

git log --author=Etienne

git checkout {version}

git checkout master

git tag v1; Après un commit permet de nommer notre version en "v1"

git tag -d v1; Supprime le tag "v1" mais conserve la version

git remote add origin /srv/passerelle.git

git remote

git remote -v

git push origin master: Envoie la version "origin" sur la branche "master"

git clone /srv/passerelle.git; Duplique un dépot .git

git fetch origin master; Récupère la version "origin" sur la branche "master"






NODE JS

